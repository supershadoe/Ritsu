`use strict`;
/* Adopted from https://gist.github.com/devsnek/77275f6e3f810a9545440931ed314dc1 */

const VERIFY_ALGO = "NODE-ED25519";

/**
 * To convert a string which has raw bytes encoded as hexadecimal numbers
 * into an Uint8Array.
 * 
 * @param hex The bytes in hex provided as a string
 * @returns Uint8Array
 */
function hex2bin(hex: string): Uint8Array {
    return new Uint8Array(
        hex.match(/[A-Za-z0-9]{2}/g)?.map(
            (byte) => parseInt(byte, 16)
        ) ?? []
    );
}

/**
 * Creates an instance of CryptoKey using SubtleCrypto module exposed by
 * Cloudflare workers.
 * 
 * Refer to [here](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto) for details on how to use it.
 * 
 * @param pubKey The Public key generated by Discord for the app.
 * @returns A promise for the CryptoKey instance created from the public key.
 */
export async function importPubKey(pubKey: string): Promise<CryptoKey> {
    return await crypto.subtle.importKey(
        "raw",
        hex2bin(pubKey),
        {
            name: VERIFY_ALGO,
            namedCurve: VERIFY_ALGO
        },
        true,
        ["verify"]
    );
}

/**
 * - To verify every request received to validate if the request is truly from
 * Discord or not.
 * - Validating the requests are mandatory as Discord would stop sending POST
 * requests if validation isn't done.
 *
 * Refer to [here](https://discord.com/developers/docs/interactions/receiving-and-responding#security-and-authorization) for more info.
 * 
 * @param key An instance of CryptoKey created from the app's public key
 * for verification.
 * @param request The body of the received request.
 * @returns A promise for the response which is to be sent.
 */
export async function verify(
    key: CryptoKey, request: Request
): Promise<Response> {
    const signature = request.headers.get("X-Signature-ED25519");
    const timestamp = request.headers.get("X-Signature-Timestamp");
    const body = await request.text();
    if (signature && timestamp) {
        const isVerified = await crypto.subtle.verify(
            VERIFY_ALGO,
            key,
            hex2bin(signature),
            (new TextEncoder()).encode(timestamp + body)
        );
        if (!isVerified) {
            return new Response(
                "Received a request with invalid signature", { status: 401 }
            );
        } else {
            try {
                const json = JSON.parse(body);
                return handleInteractions(json);
            }
            catch (e) {
                if (!(e instanceof SyntaxError)) { throw e; }
                return new Response("Malformed JSON body", { status: 400 });
            }
        }
    }
    return new Response(
        "Missing signature and timestamp for verification", { status: 401 }
    );
}


/**
 * Creates a Response object from JSON objects.
 *
 * Made just for convenience.
 *
 * @param responseBody The response object to stringify.
 * @param options Custom settings like headers/status code.
 * @returns A new response object generated with the required defaults.
 */
function jsonResponse(
    responseBody: object,
    options: object = {
        headers: {
            "Content-Type": "application/json;charset=UTF-8"
        }
    }
): Response {
    return new Response(JSON.stringify(responseBody), options);
}

/**
 * Main interaction handler function
 * 
 * @param interactionBody The body of request sent by Discord.
 * @returns A promise for the response which is to be sent.
 */
async function handleInteractions(interactionBody: any): Promise<Response> {
    if (interactionBody.type === 1) {
        return jsonResponse({type: 1});
    }
    return new Response("Handling not implemented yet", { status: 501 });
}
